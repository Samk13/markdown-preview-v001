{"version":3,"sources":["components/NavBar.js","components/Information.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggle","bind","assertThisInitialized","state","isOpen","setState","react_default","a","createElement","Navbar","fixed","light","expand","color","NavbarBrand","style","fontWeight","href","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavItem","NavLink","target","React","Component","Information","Col","Button","id","size","block","marginBottom","role","aria-label","UncontrolledCollapse","toggler","Card","CardBody","Header","Jumbotron","initialMarkdown","renderer","marked","Renderer","link","title","text","concat","setOptions","breaks","App","handelChange","e","markdown","value","_this2","NavBar_NavBar","components_Header","components_Information","Container","Row","FormGroup","Label","for","Input","height","type","name","onChange","dangerouslySetInnerHTML","__html","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2871dcad.chunk.js","sourcesContent":["import React from 'react';\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n   } from 'reactstrap';\r\n\r\nexport default class NavBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.toggle = this.toggle.bind(this);\r\n    this.state = {\r\n      isOpen: false\r\n    };\r\n  }\r\n  toggle() {\r\n    this.setState({\r\n      isOpen: !this.state.isOpen\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar fixed='top' light expand=\"md\" color=\"info\">\r\n          <NavbarBrand style={{fontWeight:500}}href=\"https://samk13.github.io/markdown-preview-v001/\">Markdown Preview</NavbarBrand>\r\n          <NavbarToggler onClick={this.toggle} />\r\n          <Collapse isOpen={this.state.isOpen} navbar>\r\n            <Nav className=\"ml-auto\" navbar>\r\n\r\n              <NavItem>\r\n                <NavLink style={{fontWeight:500}}href=\"https://github.com/Samk13\" target='_blank'>MyGitHub</NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink style={{fontWeight:500}}href=\"https://www.linkedin.com/in/samarbid/\" target='_blank' >LinkedIn</NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink href=\"https://www.freecodecamp.org/sam_arbid\" target='_blank' >FCC</NavLink>\r\n              </NavItem>\r\n            </Nav>\r\n          </Collapse>\r\n        </Navbar>\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport { UncontrolledCollapse, Button, CardBody, Card, Col } from 'reactstrap';\r\n\r\nconst Information = () => (\r\n  <div>\r\n      <Col >\r\n    <Button color=\"info\" id=\"toggler\" size=\"lg\" block\r\n    style={{ marginBottom: '1rem' }}>\r\n      About this tool <span role=\"img\" aria-label=\"wow face\">üòÆ</span>\r\n    </Button>\r\n    </Col>\r\n    <UncontrolledCollapse toggler=\"#toggler\">\r\n      <Card>\r\n        <CardBody>\r\n        Markdown is a lightweight markup language, originally created by John Gruber and Aaron Swartz allowing people \"to write using an easy-to-read, easy-to-write plain text format, then convert it to structurally valid XHTML (or HTML)\".\r\n        </CardBody>\r\n      </Card>\r\n    </UncontrolledCollapse>\r\n  </div>\r\n);\r\n\r\nexport default Information;","import React from 'react';\r\nimport { Jumbotron } from 'reactstrap';\r\n\r\nconst Header = (props) => {\r\n  return (\r\n    <div>\r\n      <Jumbotron className='Jumbotron'>\r\n      <h1 className=\"display-3 text-center text-success \">üõ∞Markdown Previewer üõ∞</h1>\r\n      <p className=\"lead text-center text-warning\">A cool  tool made with ‚ù§ to convert your plain text to XHTML or HTML\r\n      <br />\r\n        please Check out my Github for more Apps üòéüçª\r\n      </p>\r\n      </Jumbotron>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react'\nimport marked from 'marked'\nimport 'bootstrap/dist/css/bootstrap.css';\nimport NavBar from './components/NavBar'\nimport Information from './components/Information'\nimport { Button, FormGroup, Label, Input, Container, Row, Col } from 'reactstrap';\nimport Header from './components/Header'\n\n\nconst initialMarkdown = `\n### Headers\n[see Wikipedia](https://en.wikipedia.org/wiki/Markdown)\n# Header 1\n## Header 2\n### Header 3\n#### Header 4\n##### Header 5\n###### Header 6\n\n### List \n- list item one\n- list item two\n- list item three\n### links\n[My Github](https://github.com/Samk13)\n[My LinkedIn](https://www.linkedin.com/in/samarbid/)\n\n### Text Decorations\n*italic* and **bold**\n### Images \n![](https://apprecs.org/ios/images/app-icons/256/96/343544214.jpg)\n\n### Blockquote\n> life will give you what ever you think of .\n### code \n\\` npm install create-react-app -g \\`\n### Coding\n\\`\\`\\`\nconst x = 10 ;\nconst y = 15;\nlet func(x,y) => (x+y);\nconsole.log (func);\n\\`\\`\\`\n`\n\nlet renderer = new marked.Renderer()\nrenderer.link = function (href, title, text) {\n  return `<a href=${href} target= '_blank'>${text}</a>`\n}\nmarked.setOptions({\n  renderer: renderer,\n  breaks: true,\n})\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      markdown: initialMarkdown\n    }\n  }\n  handelChange = e => this.setState({ markdown: e.target.value })\n\n\n  render() {\n    return (\n\n      <div>\n        <NavBar />\n        <Header />\n        <Information />\n\n        <Button color=\"primary\" size=\"lg\" block onClick={() => this.setState({ markdown: '' })}>ClearText</Button>\n        <br />\n\n        <Container>\n          <Row>\n\n\n            <Col>\n              <FormGroup>\n                <Label for=\"exampleText\">Write your text here  <span role=\"img\" aria-label=\"write your text here\">‚úç</span></Label>\n                <Input className='left' style={{ height: 900 }} type=\"textarea\" id='editor' name=\"text\" value={this.state.markdown} onChange={this.handelChange} />\n              </FormGroup>\n            </Col>\n\n\n            <Col>\n              <p>MarkdownResult <span role=\"img\" aria-label=\"look down\">üëá</span></p>\n              <div className='right'>\n                <div id='preview'\n                  dangerouslySetInnerHTML={{ __html: marked(this.state.markdown) }} />\n              </div>\n            </Col>\n          </Row>\n\n        </Container>\n\n      </div>\n\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}