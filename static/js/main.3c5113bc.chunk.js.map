{"version":3,"sources":["components/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggle","bind","assertThisInitialized","state","isOpen","setState","react_default","a","createElement","Navbar","light","expand","color","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavItem","NavLink","target","React","Component","initialMarkdown","renderer","marked","Renderer","link","title","text","concat","setOptions","breaks","highlight","code","hljs","highlightAuto","value","App","handelChange","e","markdown","_this2","NavBar_NavBar","Jumbotron","fluid","Button","size","block","Container","Row","Col","FormGroup","Label","for","role","aria-label","Input","style","height","type","id","name","onChange","dangerouslySetInnerHTML","__html","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3c5113bc.chunk.js","sourcesContent":["import React from 'react';\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n   } from 'reactstrap';\r\n\r\nexport default class NavBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.toggle = this.toggle.bind(this);\r\n    this.state = {\r\n      isOpen: false\r\n    };\r\n  }\r\n  toggle() {\r\n    this.setState({\r\n      isOpen: !this.state.isOpen\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar light expand=\"md\" color=\"info\">\r\n          <NavbarBrand href=\"/\">Markdown Preview</NavbarBrand>\r\n          <NavbarToggler onClick={this.toggle} />\r\n          <Collapse isOpen={this.state.isOpen} navbar>\r\n            <Nav className=\"ml-auto\" navbar>\r\n\r\n              <NavItem>\r\n                <NavLink href=\"https://github.com/Samk13\" target='_blank'>MyGitHub</NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink href=\"https://www.linkedin.com/in/samarbid/\" target='_blank' >LinkedIn</NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink href=\"https://www.freecodecamp.org/sam_arbid\" target='_blank' >FCC</NavLink>\r\n              </NavItem>\r\n            </Nav>\r\n          </Collapse>\r\n        </Navbar>\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react'\nimport marked from 'marked'\nimport hljs from 'highlight.js';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport NavBar from './components/NavBar'\nimport { Button, FormGroup, Label, Input, Jumbotron, Container, Row, Col } from 'reactstrap';\n\n\nconst initialMarkdown = `\n### Headers\n# Header 1\n## Header 2\n### Header 3\n#### Header 4\n##### Header 5\n###### Header 6\n\n### List \n- list item one\n- list item two\n- list item three\n### links\n[My Github](https://github.com/Samk13)\n[My LinkedIn](https://www.linkedin.com/in/samarbid/)\n\n### Text Decorations\n*italic* and **bold**\n### Images \n![](https://apprecs.org/ios/images/app-icons/256/96/343544214.jpg)\n\n### Blockquote\n> life will give you what ever you think of .\n### code \n\\` npm install create-react-app -g \\`\n\\`\\`\\`\nconst x = 10 ;\nconst y = 15;\nlet func(x,y) => (x+y);\nconsole.log (func);\n\\`\\`\\`\n`\n\nlet renderer = new marked.Renderer()\nrenderer.link = function (href, title, text) {\n  return `<a href=${href} target= '_blank'>${text}</a>`\n}\nmarked.setOptions({\n  renderer: renderer,\n  breaks: true,\n  highlight: function (code) {\n    return hljs.highlightAuto(code).value\n  }\n})\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      markdown: initialMarkdown\n    }\n  }\n  handelChange = e => this.setState({ markdown: e.target.value })\n\n\n  render() {\n    return (\n\n      <div>\n        <NavBar />\n        <Jumbotron fluid className='Jumbotron'>\n          <h1 className=\"display-3 text-center text-success \">üõ∞Markdown Preview üõ∞</h1>\n          <p className=\"lead text-center text-warning\">This is my markdown App from FCC Front End Libraries Project created by Sam Arbid </p>\n\n        </Jumbotron>\n        <Button color=\"primary\" size=\"lg\" block onClick={() => this.setState({ markdown: '' })}>ClearText</Button>\n        <br />\n\n        <Container>\n          <Row>\n\n\n            <Col>\n              <FormGroup>\n                <Label for=\"exampleText\">Write your text here  <span role=\"img\" aria-label=\"write your text here\">‚úç</span></Label>\n                <Input className='left' style={{ height: 900 }} type=\"textarea\" id='editor' name=\"text\" value={this.state.markdown} onChange={this.handelChange} />\n              </FormGroup>\n            </Col>\n\n\n            <Col>\n              <p>MarkdownResult <span role=\"img\" aria-label=\"look down\">üëá</span></p>\n              <div className='right'>\n                <div id='preview'\n                  dangerouslySetInnerHTML={{ __html: marked(this.state.markdown) }} />\n              </div>\n            </Col>\n          </Row>\n\n        </Container>\n\n      </div>\n\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}